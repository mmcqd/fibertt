import test/id

def Category : Type => sig {
    Obj : Type ;
    Hom : sig {o1 : Obj ; o2 : Obj} -> Type ;
    idn : (x : Obj) -> Hom [o1 => x ; o2 => x] ;
    seq : (f : Hom) (g : Hom [o1 => f.o2]) -> Hom [o1 => f.o1 ; o2 => g.o2] ;
    seqL : (f : Hom) -> Id {tp => Hom [o1 => f.o1 ; o2 => f.o2] ; l => seq (idn f.o1) f ; r => f} ;
    seqR : (f : Hom) -> Id {tp => Hom [o1 => f.o1 ; o2 => f.o2] ; l => seq f (idn f.o2) ; r => f} ;
    seqA : (f : Hom) (g : Hom [o1 => f.o2]) (h : Hom [o1 => g.o2]) -> Id {tp => Hom [o1 => f.o1 ; o2 => h.o2] ; l => seq f (seq g h) ; r => seq (seq f g) h}
}

def Types : Category => {
    Obj => Type ;
    Hom => \args => args.o1 -> args.o2 ;
    idn => \x => {pt => \x => x} ;
    seq => \f g => {pt => \x => g.pt (f.pt x)} ;
    seqL => \f => \B p => p ;
    seqR => \f => \B p => p ;
    seqA => \f g h => \B p => p
}

{-
def category : type :=
  sig (ob : type)
      (hom : sig (s : ob) (t : ob) â†’ type)
      (idn : (x : ob) -> hom # [ s .= x | t .= x ])
      (seq : (f : hom # []) -> (g : hom # [ s .= f.t ]) -> hom # [ s .= f.s | t .= g.t ])
      (seqL : (f : hom # []) -> path {hom # [ s .= f.s | t .= f.t ]} {seq {idn {f.s}} f} f)
      (seqR : (f : hom # []) -> path {hom # [ s .= f.s | t .= f.t ]} {seq f {idn {f.t}}} f)
      (seqA : (f : hom # []) -> (g : hom # [ s .= f.t ]) -> (h : hom # [ s .= g.t ]) -> path {hom # [ s .= f.s | t .= h.t ]} {seq f {seq g h}} {seq {seq f g} h})

#print category

def types : category :=
  struct (ob : type)
         (hom : args => {args.s} -> {args.t})
         (idn : x => struct (s : x) (t : x) (fib : x => x))
         (seq : f g => struct (s : f.s) (t : g.t) (fib : x => g.fib {f.fib x}))
         (seqL : f i => f)
         (seqR : f i => f)
         (seqA : f g h i => struct (s : f.s) (t : h.t) (fib : x => {h.fib} {{g.fib} {{f.fib} x}}))



-}
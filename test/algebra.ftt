

def Id (A : Type) (x y : A) : Type => (B : A -> Type) -> B x -> B y

def Monoid : Type => sig {
    C : Type ;
    * : C -> C -> C ;
    e : C ;
    idL : (x : C) -> Id C (* x e) x ;
    idR : (x : C) -> Id C (* e x) x ;
    assoc : (x y z : C) -> Id C (* x (* y z)) (* (* x y) z) 
}


def UnitMonoid : Monoid [C => sig {}] => {
    * => \_ _ => {} ;
    e => {} ;
    idL => \_ => \B p => p ;
    idR => \_ => \B p => p ;
    assoc => \_ _ _ => \B p => p 
}

def test (x : Monoid) : Id Type Type Type => ?